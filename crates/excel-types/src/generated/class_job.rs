/// This file is auto-generated. Do not edit manually.

use crate::prelude::*;

#[derive(Debug, Clone)]
pub struct ClassJob {
    pub row_id: u32,
    pub name: String,
    pub abbreviation: String,
    pub class_job_category_id: u32,
    pub class_job_category: RowRef<ClassJobCategory>,
    pub exp_array_index: i8,
    pub battle_class_index: i8,
    pub job_index: u8,
    pub doh_dol_job_index: i8,
    pub modifier_hit_points: u16,
    pub modifier_mana_points: u16,
    pub modifier_strength: u16,
    pub modifier_vitality: u16,
    pub modifier_dexterity: u16,
    pub modifier_intelligence: u16,
    pub modifier_mind: u16,
    pub modifier_piety: u16,
    pub pv_p_action_sort_row: u8,
    pub class_job_parent_id: u32,
    pub class_job_parent: RowRef<ClassJob>,
    pub name_english: u8,
    pub item_starting_weapon_id: u32,
    pub item_starting_weapon: RowRef<Item>,
    pub role: i32,
    pub starting_town_id: u32,
    pub starting_town: RowRef<Town>,
    pub monster_note_id: u32,
    pub monster_note: RowRef<MonsterNote>,
    pub primary_stat: i8,
    pub limit_break1_id: u32,
    pub limit_break1: RowRef<Action>,
    pub limit_break2_id: u32,
    pub limit_break2: RowRef<Action>,
    pub limit_break3_id: u32,
    pub limit_break3: RowRef<Action>,
    pub ui_priority: u16,
    pub item_soul_crystal_id: u32,
    pub item_soul_crystal: RowRef<Item>,
    pub unlock_quest_id: u32,
    pub unlock_quest: RowRef<Quest>,
    pub relic_quest_id: u32,
    pub relic_quest: RowRef<Quest>,
    pub prerequisite_id: u32,
    pub prerequisite: RowRef<Quest>,
    pub starting_level: u32,
    pub party_bonus: u8,
    pub is_limited_job: u8,
    pub can_queue_for_duty: bool,
}

impl Sheet for ClassJob {
    const SHEET_NAME: &'static str = "ClassJob";
}

impl FromExcelRow for ClassJob {
    fn from_row(row: &ExcelRow) -> Option<Self> {
        let single_row = match &row.kind {
            ExcelRowKind::SingleRow(s) => s,
            _ => return None,
        };

        Some(Self {
            row_id: row.row_id,
            name: single_row.columns.get(0).to_owned_string(),
            abbreviation: single_row.columns.get(1).to_owned_string(),
            class_job_category_id: single_row.columns.get(3).to_u32(),
            class_job_category: RowRef::<ClassJobCategory>::from(single_row.columns.get(3).to_u32()),
            exp_array_index: single_row.columns.get(4).to_i8(),
            battle_class_index: single_row.columns.get(5).to_i8(),
            job_index: single_row.columns.get(7).to_u8(),
            doh_dol_job_index: single_row.columns.get(8).to_i8(),
            modifier_hit_points: single_row.columns.get(9).to_u16(),
            modifier_mana_points: single_row.columns.get(10).to_u16(),
            modifier_strength: single_row.columns.get(11).to_u16(),
            modifier_vitality: single_row.columns.get(12).to_u16(),
            modifier_dexterity: single_row.columns.get(13).to_u16(),
            modifier_intelligence: single_row.columns.get(14).to_u16(),
            modifier_mind: single_row.columns.get(15).to_u16(),
            modifier_piety: single_row.columns.get(16).to_u16(),
            pv_p_action_sort_row: single_row.columns.get(26).to_u8(),
            class_job_parent_id: single_row.columns.get(28).to_u32(),
            class_job_parent: RowRef::<ClassJob>::from(single_row.columns.get(28).to_u32()),
            name_english: single_row.columns.get(29).to_u8(),
            item_starting_weapon_id: single_row.columns.get(30).to_u32(),
            item_starting_weapon: RowRef::<Item>::from(single_row.columns.get(30).to_u32()),
            role: single_row.columns.get(32).to_i32(),
            starting_town_id: single_row.columns.get(33).to_u32(),
            starting_town: RowRef::<Town>::from(single_row.columns.get(33).to_u32()),
            monster_note_id: single_row.columns.get(34).to_u32(),
            monster_note: RowRef::<MonsterNote>::from(single_row.columns.get(34).to_u32()),
            primary_stat: single_row.columns.get(35).to_i8(),
            limit_break1_id: single_row.columns.get(36).to_u32(),
            limit_break1: RowRef::<Action>::from(single_row.columns.get(36).to_u32()),
            limit_break2_id: single_row.columns.get(37).to_u32(),
            limit_break2: RowRef::<Action>::from(single_row.columns.get(37).to_u32()),
            limit_break3_id: single_row.columns.get(38).to_u32(),
            limit_break3: RowRef::<Action>::from(single_row.columns.get(38).to_u32()),
            ui_priority: single_row.columns.get(39).to_u16(),
            item_soul_crystal_id: single_row.columns.get(40).to_u32(),
            item_soul_crystal: RowRef::<Item>::from(single_row.columns.get(40).to_u32()),
            unlock_quest_id: single_row.columns.get(41).to_u32(),
            unlock_quest: RowRef::<Quest>::from(single_row.columns.get(41).to_u32()),
            relic_quest_id: single_row.columns.get(42).to_u32(),
            relic_quest: RowRef::<Quest>::from(single_row.columns.get(42).to_u32()),
            prerequisite_id: single_row.columns.get(43).to_u32(),
            prerequisite: RowRef::<Quest>::from(single_row.columns.get(43).to_u32()),
            starting_level: single_row.columns.get(44).to_u32(),
            party_bonus: single_row.columns.get(45).to_u8(),
            is_limited_job: single_row.columns.get(47).to_u8(),
            can_queue_for_duty: single_row.columns.get(48).to_bit(0),
        })
    }
}

