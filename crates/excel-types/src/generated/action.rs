/// This file is auto-generated. Do not edit manually.

use crate::prelude::*;

#[derive(Debug, Clone)]
pub struct Action {
    pub row_id: u32,
    pub name: String,
    pub icon_id: u32,
    pub action_category_id: u32,
    pub action_category: RowRef<ActionCategory>,
    pub animation_start_id: u32,
    pub animation_start: RowRef<ActionCastTimeline>,
    pub vfx_id: u32,
    pub vfx: RowRef<ActionCastVFX>,
    pub animation_end_id: u32,
    pub animation_end: RowRef<ActionTimeline>,
    pub action_timeline_hit_id: u32,
    pub action_timeline_hit: RowRef<ActionTimeline>,
    pub class_job_id: u32,
    pub class_job: RowRef<ClassJob>,
    pub behaviour_type: u8,
    pub class_job_level: u8,
    pub is_role_action: bool,
    pub range: i8,
    pub can_target_self: bool,
    pub can_target_party: bool,
    pub can_target_friendly: bool,
    pub can_target_hostile: bool,
    pub target_area: bool,
    pub can_target_dead: bool,
    pub cast_type: u8,
    pub effect_range: u8,
    pub x_axis_modifier: u8,
    pub primary_cost_type: u8,
    pub primary_cost_value: u16,
    pub secondary_cost_type: u8,
    pub secondary_cost_value_id: u32,
    pub action_combo_id: u32,
    pub action_combo: RowRef<Action>,
    pub preserves_combo: bool,
    pub cast_100ms: u16,
    pub recast_100ms: u16,
    pub cooldown_group: u8,
    pub additional_cooldown_group: u8,
    pub max_charges: u8,
    pub attack_type_id: u32,
    pub attack_type: RowRef<AttackType>,
    pub aspect: u8,
    pub action_proc_status_id: u32,
    pub action_proc_status: RowRef<ActionProcStatus>,
    pub status_gain_self_id: u32,
    pub status_gain_self: RowRef<Status>,
    pub unlock_link_id: u32,
    pub class_job_category_id: u32,
    pub class_job_category: RowRef<ClassJobCategory>,
    pub affects_position: bool,
    pub omen_id: u32,
    pub omen: RowRef<Omen>,
    pub is_pv_p: bool,
    pub is_player_action: bool,
}

impl Sheet for Action {
    const SHEET_NAME: &'static str = "Action";
}

impl FromExcelRow for Action {
    fn from_row(row: &ExcelRow) -> Option<Self> {
        let single_row = match &row.kind {
            ExcelRowKind::SingleRow(s) => s,
            _ => return None,
        };

        Some(Self {
            row_id: row.row_id,
            name: single_row.columns.get(0).to_owned_string(),
            icon_id: single_row.columns.get(2).to_u32(),
            action_category_id: single_row.columns.get(3).to_u32(),
            action_category: RowRef::<ActionCategory>::from(single_row.columns.get(3).to_u32()),
            animation_start_id: single_row.columns.get(5).to_u32(),
            animation_start: RowRef::<ActionCastTimeline>::from(single_row.columns.get(5).to_u32()),
            vfx_id: single_row.columns.get(6).to_u32(),
            vfx: RowRef::<ActionCastVFX>::from(single_row.columns.get(6).to_u32()),
            animation_end_id: single_row.columns.get(7).to_u32(),
            animation_end: RowRef::<ActionTimeline>::from(single_row.columns.get(7).to_u32()),
            action_timeline_hit_id: single_row.columns.get(8).to_u32(),
            action_timeline_hit: RowRef::<ActionTimeline>::from(single_row.columns.get(8).to_u32()),
            class_job_id: single_row.columns.get(10).to_u32(),
            class_job: RowRef::<ClassJob>::from(single_row.columns.get(10).to_u32()),
            behaviour_type: single_row.columns.get(11).to_u8(),
            class_job_level: single_row.columns.get(12).to_u8(),
            is_role_action: single_row.columns.get(13).to_bit(1),
            range: single_row.columns.get(14).to_i8(),
            can_target_self: single_row.columns.get(15).to_bit(2),
            can_target_party: single_row.columns.get(16).to_bit(3),
            can_target_friendly: single_row.columns.get(17).to_bit(4),
            can_target_hostile: single_row.columns.get(18).to_bit(5),
            target_area: single_row.columns.get(21).to_bit(0),
            can_target_dead: single_row.columns.get(25).to_bit(3),
            cast_type: single_row.columns.get(27).to_u8(),
            effect_range: single_row.columns.get(28).to_u8(),
            x_axis_modifier: single_row.columns.get(29).to_u8(),
            primary_cost_type: single_row.columns.get(31).to_u8(),
            primary_cost_value: single_row.columns.get(32).to_u16(),
            secondary_cost_type: single_row.columns.get(33).to_u8(),
            secondary_cost_value_id: single_row.columns.get(34).to_u32(),
            action_combo_id: single_row.columns.get(35).to_u32(),
            action_combo: RowRef::<Action>::from(single_row.columns.get(35).to_u32()),
            preserves_combo: single_row.columns.get(36).to_bit(6),
            cast_100ms: single_row.columns.get(37).to_u16(),
            recast_100ms: single_row.columns.get(39).to_u16(),
            cooldown_group: single_row.columns.get(40).to_u8(),
            additional_cooldown_group: single_row.columns.get(41).to_u8(),
            max_charges: single_row.columns.get(42).to_u8(),
            attack_type_id: single_row.columns.get(43).to_u32(),
            attack_type: RowRef::<AttackType>::from(single_row.columns.get(43).to_u32()),
            aspect: single_row.columns.get(44).to_u8(),
            action_proc_status_id: single_row.columns.get(45).to_u32(),
            action_proc_status: RowRef::<ActionProcStatus>::from(single_row.columns.get(45).to_u32()),
            status_gain_self_id: single_row.columns.get(47).to_u32(),
            status_gain_self: RowRef::<Status>::from(single_row.columns.get(47).to_u32()),
            unlock_link_id: single_row.columns.get(48).to_u32(),
            class_job_category_id: single_row.columns.get(49).to_u32(),
            class_job_category: RowRef::<ClassJobCategory>::from(single_row.columns.get(49).to_u32()),
            affects_position: single_row.columns.get(52).to_bit(0),
            omen_id: single_row.columns.get(53).to_u32(),
            omen: RowRef::<Omen>::from(single_row.columns.get(53).to_u32()),
            is_pv_p: single_row.columns.get(55).to_bit(1),
            is_player_action: single_row.columns.get(67).to_bit(4),
        })
    }
}

