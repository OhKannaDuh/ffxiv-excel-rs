/// This file is auto-generated. Do not edit manually.

use crate::prelude::*;

#[derive(Debug, Clone)]
pub struct Quest {
    pub row_id: u32,
    pub name: String,
    pub id: String,
    pub expansion_id: u32,
    pub expansion: RowRef<ExVersion>,
    pub class_job_category_0_id: u32,
    pub class_job_category_0: RowRef<ClassJobCategory>,
    pub class_job_level_0: u16,
    pub quest_level_offset: u8,
    pub class_job_category_1_id: u32,
    pub class_job_category_1: RowRef<ClassJobCategory>,
    pub class_job_level_1: u16,
    pub previous_quest_join: u8,
    pub quest_lock_join: u8,
    pub header: u16,
    pub class_job_unlock_id: u32,
    pub class_job_unlock: RowRef<ClassJob>,
    pub grand_company_id: u32,
    pub grand_company: RowRef<GrandCompany>,
    pub grand_company_rank_id: u32,
    pub grand_company_rank: RowRef<GrandCompanyRank>,
    pub instance_content_join: u8,
    pub festival_id: u32,
    pub festival: RowRef<Festival>,
    pub festival_begin: u8,
    pub festival_end: u8,
    pub bell_start: u16,
    pub bell_end: u16,
    pub beast_tribe_id: u32,
    pub beast_tribe: RowRef<BeastTribe>,
    pub beast_reputation_rank_id: u32,
    pub beast_reputation_rank: RowRef<BeastReputationRank>,
    pub beast_reputation_value: u16,
    pub satisfaction_npc_id: u32,
    pub satisfaction_npc: RowRef<SatisfactionNpc>,
    pub satisfaction_level: u8,
    pub mount_required_id: u32,
    pub mount_required: RowRef<Mount>,
    pub is_house_required: bool,
    pub delivery_quest_id: u32,
    pub delivery_quest: RowRef<DeliveryQuest>,
    pub issuer_start_id: u32,
    pub issuer_start_e_obj_name: RowRef<EObjName>,
    pub issuer_start_e_npc_resident: RowRef<ENpcResident>,
    pub issuer_location_id: u32,
    pub issuer_location: RowRef<Level>,
    pub client_behavior_id: u32,
    pub client_behavior: RowRef<Behavior>,
    pub target_end_id: u32,
    pub target_end_e_obj_name: RowRef<EObjName>,
    pub target_end_e_npc_resident: RowRef<ENpcResident>,
    pub is_repeatable: bool,
    pub repeat_interval_type: u8,
    pub quest_repeat_flag_id: u32,
    pub quest_repeat_flag: RowRef<QuestRepeatFlag>,
    pub can_cancel: bool,
    pub _type: u8,
    pub quest_class_job_supply_id: u32,
    pub quest_class_job_supply: RowRef<QuestClassJobSupply>,
    pub level_max: u8,
    pub class_job_required_id: u32,
    pub class_job_required: RowRef<ClassJob>,
    pub quest_reward_other_display_id: u32,
    pub quest_reward_other_display: RowRef<QuestRewardOther>,
    pub exp_factor: u16,
    pub gil_reward: u32,
    pub currency_reward_id: u32,
    pub currency_reward: RowRef<Item>,
    pub currency_reward_count: u32,
    pub item_reward_type: u8,
    pub emote_reward_id: u32,
    pub emote_reward: RowRef<Emote>,
    pub action_reward_id: u32,
    pub action_reward: RowRef<Action>,
    pub system_reward_0: u16,
    pub other_reward_id: u32,
    pub other_reward: RowRef<QuestRewardOther>,
    pub system_reward_1: u16,
    pub gc_type_reward: u16,
    pub instance_content_unlock_id: u32,
    pub instance_content_unlock: RowRef<InstanceContent>,
    pub tomestone: u8,
    pub tomestone_reward_id: u32,
    pub tomestone_count_reward: u8,
    pub reputation_reward: u8,
    pub place_name_id: u32,
    pub place_name: RowRef<PlaceName>,
    pub journal_genre_id: u32,
    pub journal_genre: RowRef<JournalGenre>,
    pub icon_id: u32,
    pub icon_special_id: u32,
    pub introduction: bool,
    pub hide_offer_icon: bool,
    pub event_icon_type_id: u32,
    pub event_icon_type: RowRef<EventIconType>,
    pub sort_key: u16,
}

impl Sheet for Quest {
    const SHEET_NAME: &'static str = "Quest";
}

impl FromExcelRow for Quest {
    fn from_row(row: &ExcelRow) -> Option<Self> {
        let single_row = match &row.kind {
            ExcelRowKind::SingleRow(s) => s,
            _ => return None,
        };

        Some(Self {
            row_id: row.row_id,
            name: single_row.columns.get(0).to_owned_string(),
            id: single_row.columns.get(1).to_owned_string(),
            expansion_id: single_row.columns.get(2).to_u32(),
            expansion: RowRef::<ExVersion>::from(single_row.columns.get(2).to_u32()),
            class_job_category_0_id: single_row.columns.get(3).to_u32(),
            class_job_category_0: RowRef::<ClassJobCategory>::from(single_row.columns.get(3).to_u32()),
            class_job_level_0: single_row.columns.get(4).to_u16(),
            quest_level_offset: single_row.columns.get(5).to_u8(),
            class_job_category_1_id: single_row.columns.get(6).to_u32(),
            class_job_category_1: RowRef::<ClassJobCategory>::from(single_row.columns.get(6).to_u32()),
            class_job_level_1: single_row.columns.get(7).to_u16(),
            previous_quest_join: single_row.columns.get(8).to_u8(),
            quest_lock_join: single_row.columns.get(13).to_u8(),
            header: single_row.columns.get(16).to_u16(),
            class_job_unlock_id: single_row.columns.get(19).to_u32(),
            class_job_unlock: RowRef::<ClassJob>::from(single_row.columns.get(19).to_u32()),
            grand_company_id: single_row.columns.get(20).to_u32(),
            grand_company: RowRef::<GrandCompany>::from(single_row.columns.get(20).to_u32()),
            grand_company_rank_id: single_row.columns.get(21).to_u32(),
            grand_company_rank: RowRef::<GrandCompanyRank>::from(single_row.columns.get(21).to_u32()),
            instance_content_join: single_row.columns.get(22).to_u8(),
            festival_id: single_row.columns.get(26).to_u32(),
            festival: RowRef::<Festival>::from(single_row.columns.get(26).to_u32()),
            festival_begin: single_row.columns.get(27).to_u8(),
            festival_end: single_row.columns.get(28).to_u8(),
            bell_start: single_row.columns.get(29).to_u16(),
            bell_end: single_row.columns.get(30).to_u16(),
            beast_tribe_id: single_row.columns.get(31).to_u32(),
            beast_tribe: RowRef::<BeastTribe>::from(single_row.columns.get(31).to_u32()),
            beast_reputation_rank_id: single_row.columns.get(32).to_u32(),
            beast_reputation_rank: RowRef::<BeastReputationRank>::from(single_row.columns.get(32).to_u32()),
            beast_reputation_value: single_row.columns.get(33).to_u16(),
            satisfaction_npc_id: single_row.columns.get(34).to_u32(),
            satisfaction_npc: RowRef::<SatisfactionNpc>::from(single_row.columns.get(34).to_u32()),
            satisfaction_level: single_row.columns.get(35).to_u8(),
            mount_required_id: single_row.columns.get(36).to_u32(),
            mount_required: RowRef::<Mount>::from(single_row.columns.get(36).to_u32()),
            is_house_required: single_row.columns.get(37).to_bit(0),
            delivery_quest_id: single_row.columns.get(38).to_u32(),
            delivery_quest: RowRef::<DeliveryQuest>::from(single_row.columns.get(38).to_u32()),
            issuer_start_id: single_row.columns.get(39).to_u32(),
            issuer_start_e_obj_name: RowRef::<EObjName>::from(single_row.columns.get(39).to_u32()),
            issuer_start_e_npc_resident: RowRef::<ENpcResident>::from(single_row.columns.get(39).to_u32()),
            issuer_location_id: single_row.columns.get(40).to_u32(),
            issuer_location: RowRef::<Level>::from(single_row.columns.get(40).to_u32()),
            client_behavior_id: single_row.columns.get(41).to_u32(),
            client_behavior: RowRef::<Behavior>::from(single_row.columns.get(41).to_u32()),
            target_end_id: single_row.columns.get(42).to_u32(),
            target_end_e_obj_name: RowRef::<EObjName>::from(single_row.columns.get(42).to_u32()),
            target_end_e_npc_resident: RowRef::<ENpcResident>::from(single_row.columns.get(42).to_u32()),
            is_repeatable: single_row.columns.get(43).to_bit(1),
            repeat_interval_type: single_row.columns.get(44).to_u8(),
            quest_repeat_flag_id: single_row.columns.get(45).to_u32(),
            quest_repeat_flag: RowRef::<QuestRepeatFlag>::from(single_row.columns.get(45).to_u32()),
            can_cancel: single_row.columns.get(46).to_bit(2),
            _type: single_row.columns.get(47).to_u8(),
            quest_class_job_supply_id: single_row.columns.get(48).to_u32(),
            quest_class_job_supply: RowRef::<QuestClassJobSupply>::from(single_row.columns.get(48).to_u32()),
            level_max: single_row.columns.get(1438).to_u8(),
            class_job_required_id: single_row.columns.get(1439).to_u32(),
            class_job_required: RowRef::<ClassJob>::from(single_row.columns.get(1439).to_u32()),
            quest_reward_other_display_id: single_row.columns.get(1440).to_u32(),
            quest_reward_other_display: RowRef::<QuestRewardOther>::from(single_row.columns.get(1440).to_u32()),
            exp_factor: single_row.columns.get(1441).to_u16(),
            gil_reward: single_row.columns.get(1442).to_u32(),
            currency_reward_id: single_row.columns.get(1443).to_u32(),
            currency_reward: RowRef::<Item>::from(single_row.columns.get(1443).to_u32()),
            currency_reward_count: single_row.columns.get(1444).to_u32(),
            item_reward_type: single_row.columns.get(1451).to_u8(),
            emote_reward_id: single_row.columns.get(1500).to_u32(),
            emote_reward: RowRef::<Emote>::from(single_row.columns.get(1500).to_u32()),
            action_reward_id: single_row.columns.get(1501).to_u32(),
            action_reward: RowRef::<Action>::from(single_row.columns.get(1501).to_u32()),
            system_reward_0: single_row.columns.get(1504).to_u16(),
            other_reward_id: single_row.columns.get(1505).to_u32(),
            other_reward: RowRef::<QuestRewardOther>::from(single_row.columns.get(1505).to_u32()),
            system_reward_1: single_row.columns.get(1506).to_u16(),
            gc_type_reward: single_row.columns.get(1507).to_u16(),
            instance_content_unlock_id: single_row.columns.get(1508).to_u32(),
            instance_content_unlock: RowRef::<InstanceContent>::from(single_row.columns.get(1508).to_u32()),
            tomestone: single_row.columns.get(1509).to_u8(),
            tomestone_reward_id: single_row.columns.get(1510).to_u32(),
            tomestone_count_reward: single_row.columns.get(1511).to_u8(),
            reputation_reward: single_row.columns.get(1512).to_u8(),
            place_name_id: single_row.columns.get(1513).to_u32(),
            place_name: RowRef::<PlaceName>::from(single_row.columns.get(1513).to_u32()),
            journal_genre_id: single_row.columns.get(1514).to_u32(),
            journal_genre: RowRef::<JournalGenre>::from(single_row.columns.get(1514).to_u32()),
            icon_id: single_row.columns.get(1516).to_u32(),
            icon_special_id: single_row.columns.get(1517).to_u32(),
            introduction: single_row.columns.get(1518).to_bit(3),
            hide_offer_icon: single_row.columns.get(1519).to_bit(4),
            event_icon_type_id: single_row.columns.get(1520).to_u32(),
            event_icon_type: RowRef::<EventIconType>::from(single_row.columns.get(1520).to_u32()),
            sort_key: single_row.columns.get(1522).to_u16(),
        })
    }
}

