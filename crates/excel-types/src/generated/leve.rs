/// This file is auto-generated. Do not edit manually.

use crate::prelude::*;

#[derive(Debug, Clone)]
pub struct Leve {
    pub row_id: u32,
    pub name: String,
    pub description: String,
    pub leve_client_id: u32,
    pub leve_client: RowRef<LeveClient>,
    pub leve_assignment_type_id: u32,
    pub leve_assignment_type: RowRef<LeveAssignmentType>,
    pub town_id: u32,
    pub town: RowRef<Town>,
    pub class_job_level: u16,
    pub time_limit: u8,
    pub allowance_cost: u8,
    pub place_name_start_id: u32,
    pub place_name_start: RowRef<PlaceName>,
    pub place_name_issued_id: u32,
    pub place_name_issued: RowRef<PlaceName>,
    pub fishing_spot_id: u32,
    pub fishing_spot: RowRef<FishingSpot>,
    pub class_job_category_id: u32,
    pub class_job_category: RowRef<ClassJobCategory>,
    pub journal_genre_id: u32,
    pub journal_genre: RowRef<JournalGenre>,
    pub place_name_start_zone_id: u32,
    pub place_name_start_zone: RowRef<PlaceName>,
    pub icon_city_state_id: u32,
    pub data_id_id: u32,
    pub data_id_craft_leve: RowRef<CraftLeve>,
    pub data_id_company_leve: RowRef<CompanyLeve>,
    pub data_id_gathering_leve: RowRef<GatheringLeve>,
    pub data_id_battle_leve: RowRef<BattleLeve>,
    pub can_cancel: bool,
    pub max_difficulty: u8,
    pub exp_factor: f32,
    pub exp_reward: u32,
    pub gil_reward: u32,
    pub leve_reward_item_id: u32,
    pub leve_reward_item: RowRef<LeveRewardItem>,
    pub leve_vfx_id: u32,
    pub leve_vfx: RowRef<LeveVfx>,
    pub leve_vfx_frame_id: u32,
    pub leve_vfx_frame: RowRef<LeveVfx>,
    pub level_levemete_id: u32,
    pub level_levemete: RowRef<Level>,
    pub icon_issuer_id: u32,
    pub locked_leve: bool,
    pub level_start_id: u32,
    pub level_start: RowRef<Level>,
    pub bgm_id: u32,
    pub bgm: RowRef<BGM>,
}

impl Sheet for Leve {
    const SHEET_NAME: &'static str = "Leve";
}

impl FromExcelRow for Leve {
    fn from_row(row: &ExcelRow) -> Option<Self> {
        let single_row = match &row.kind {
            ExcelRowKind::SingleRow(s) => s,
            _ => return None,
        };

        Some(Self {
            row_id: row.row_id,
            name: single_row.columns.get(0).to_owned_string(),
            description: single_row.columns.get(1).to_owned_string(),
            leve_client_id: single_row.columns.get(2).to_u32(),
            leve_client: RowRef::<LeveClient>::from(single_row.columns.get(2).to_u32()),
            leve_assignment_type_id: single_row.columns.get(4).to_u32(),
            leve_assignment_type: RowRef::<LeveAssignmentType>::from(single_row.columns.get(4).to_u32()),
            town_id: single_row.columns.get(5).to_u32(),
            town: RowRef::<Town>::from(single_row.columns.get(5).to_u32()),
            class_job_level: single_row.columns.get(6).to_u16(),
            time_limit: single_row.columns.get(7).to_u8(),
            allowance_cost: single_row.columns.get(8).to_u8(),
            place_name_start_id: single_row.columns.get(9).to_u32(),
            place_name_start: RowRef::<PlaceName>::from(single_row.columns.get(9).to_u32()),
            place_name_issued_id: single_row.columns.get(10).to_u32(),
            place_name_issued: RowRef::<PlaceName>::from(single_row.columns.get(10).to_u32()),
            fishing_spot_id: single_row.columns.get(11).to_u32(),
            fishing_spot: RowRef::<FishingSpot>::from(single_row.columns.get(11).to_u32()),
            class_job_category_id: single_row.columns.get(13).to_u32(),
            class_job_category: RowRef::<ClassJobCategory>::from(single_row.columns.get(13).to_u32()),
            journal_genre_id: single_row.columns.get(14).to_u32(),
            journal_genre: RowRef::<JournalGenre>::from(single_row.columns.get(14).to_u32()),
            place_name_start_zone_id: single_row.columns.get(15).to_u32(),
            place_name_start_zone: RowRef::<PlaceName>::from(single_row.columns.get(15).to_u32()),
            icon_city_state_id: single_row.columns.get(16).to_u32(),
            data_id_id: single_row.columns.get(17).to_u32(),
            data_id_craft_leve: RowRef::<CraftLeve>::from(single_row.columns.get(17).to_u32()),
            data_id_company_leve: RowRef::<CompanyLeve>::from(single_row.columns.get(17).to_u32()),
            data_id_gathering_leve: RowRef::<GatheringLeve>::from(single_row.columns.get(17).to_u32()),
            data_id_battle_leve: RowRef::<BattleLeve>::from(single_row.columns.get(17).to_u32()),
            can_cancel: single_row.columns.get(18).to_bit(0),
            max_difficulty: single_row.columns.get(19).to_u8(),
            exp_factor: single_row.columns.get(20).to_f32(),
            exp_reward: single_row.columns.get(21).to_u32(),
            gil_reward: single_row.columns.get(22).to_u32(),
            leve_reward_item_id: single_row.columns.get(23).to_u32(),
            leve_reward_item: RowRef::<LeveRewardItem>::from(single_row.columns.get(23).to_u32()),
            leve_vfx_id: single_row.columns.get(24).to_u32(),
            leve_vfx: RowRef::<LeveVfx>::from(single_row.columns.get(24).to_u32()),
            leve_vfx_frame_id: single_row.columns.get(25).to_u32(),
            leve_vfx_frame: RowRef::<LeveVfx>::from(single_row.columns.get(25).to_u32()),
            level_levemete_id: single_row.columns.get(26).to_u32(),
            level_levemete: RowRef::<Level>::from(single_row.columns.get(26).to_u32()),
            icon_issuer_id: single_row.columns.get(27).to_u32(),
            locked_leve: single_row.columns.get(28).to_bit(1),
            level_start_id: single_row.columns.get(29).to_u32(),
            level_start: RowRef::<Level>::from(single_row.columns.get(29).to_u32()),
            bgm_id: single_row.columns.get(30).to_u32(),
            bgm: RowRef::<BGM>::from(single_row.columns.get(30).to_u32()),
        })
    }
}

