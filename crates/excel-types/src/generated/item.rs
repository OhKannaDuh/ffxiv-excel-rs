/// This file is auto-generated. Do not edit manually.

use crate::prelude::*;

#[derive(Debug, Clone)]
pub struct Item {
    pub row_id: u32,
    pub singular: String,
    pub adjective: i8,
    pub plural: String,
    pub possessive_pronoun: i8,
    pub starts_with_vowel: i8,
    pub pronoun: i8,
    pub article: i8,
    pub description: String,
    pub name: String,
    pub icon_id: u32,
    pub level_item_id: u32,
    pub level_item: RowRef<ItemLevel>,
    pub rarity: u8,
    pub filter_group: u8,
    pub additional_data_id: u32,
    pub item_ui_category_id: u32,
    pub item_ui_category: RowRef<ItemUICategory>,
    pub item_search_category_id: u32,
    pub item_search_category: RowRef<ItemSearchCategory>,
    pub equip_slot_category_id: u32,
    pub equip_slot_category: RowRef<EquipSlotCategory>,
    pub item_sort_category_id: u32,
    pub item_sort_category: RowRef<ItemSortCategory>,
    pub stack_size: u32,
    pub is_unique: bool,
    pub is_untradable: bool,
    pub is_indisposable: bool,
    pub lot: bool,
    pub price_mid: u32,
    pub price_low: u32,
    pub can_be_hq: bool,
    pub dye_count: u8,
    pub is_crest_worthy: bool,
    pub item_action_id: u32,
    pub item_action: RowRef<ItemAction>,
    pub cast_time_s: u8,
    pub cooldown_s: u16,
    pub class_job_repair_id: u32,
    pub class_job_repair: RowRef<ClassJob>,
    pub item_repair_id: u32,
    pub item_repair: RowRef<ItemRepairResource>,
    pub item_glamour_id: u32,
    pub item_glamour: RowRef<Item>,
    pub desynth: u16,
    pub is_collectable: bool,
    pub always_collectable: bool,
    pub aetherial_reduce: u16,
    pub level_equip: u8,
    pub required_pvp_rank: u8,
    pub equip_restriction: u8,
    pub class_job_category_id: u32,
    pub class_job_category: RowRef<ClassJobCategory>,
    pub grand_company_id: u32,
    pub grand_company: RowRef<GrandCompany>,
    pub item_series_id: u32,
    pub item_series: RowRef<ItemSeries>,
    pub base_param_modifier: u8,
    pub model_main: u64,
    pub model_sub: u64,
    pub class_job_use_id: u32,
    pub class_job_use: RowRef<ClassJob>,
    pub damage_phys: u16,
    pub damage_mag: u16,
    pub delay_ms: u16,
    pub block_rate: u16,
    pub block: u16,
    pub defense_phys: u16,
    pub defense_mag: u16,
    pub item_special_bonus_id: u32,
    pub item_special_bonus: RowRef<ItemSpecialBonus>,
    pub item_special_bonus_param: u8,
    pub materialize_type: u8,
    pub materia_slot_count: u8,
    pub is_advanced_melding_permitted: bool,
    pub is_pv_p: bool,
    pub sub_stat_category: u8,
    pub is_glamourous: bool,
}

impl Sheet for Item {
    const SHEET_NAME: &'static str = "Item";
}

impl FromExcelRow for Item {
    fn from_row(row: &ExcelRow) -> Option<Self> {
        let single_row = match &row.kind {
            ExcelRowKind::SingleRow(s) => s,
            _ => return None,
        };

        Some(Self {
            row_id: row.row_id,
            singular: single_row.columns.get(0).to_owned_string(),
            adjective: single_row.columns.get(1).to_i8(),
            plural: single_row.columns.get(2).to_owned_string(),
            possessive_pronoun: single_row.columns.get(3).to_i8(),
            starts_with_vowel: single_row.columns.get(4).to_i8(),
            pronoun: single_row.columns.get(6).to_i8(),
            article: single_row.columns.get(7).to_i8(),
            description: single_row.columns.get(8).to_owned_string(),
            name: single_row.columns.get(9).to_owned_string(),
            icon_id: single_row.columns.get(10).to_u32(),
            level_item_id: single_row.columns.get(11).to_u32(),
            level_item: RowRef::<ItemLevel>::from(single_row.columns.get(11).to_u32()),
            rarity: single_row.columns.get(12).to_u8(),
            filter_group: single_row.columns.get(13).to_u8(),
            additional_data_id: single_row.columns.get(14).to_u32(),
            item_ui_category_id: single_row.columns.get(15).to_u32(),
            item_ui_category: RowRef::<ItemUICategory>::from(single_row.columns.get(15).to_u32()),
            item_search_category_id: single_row.columns.get(16).to_u32(),
            item_search_category: RowRef::<ItemSearchCategory>::from(single_row.columns.get(16).to_u32()),
            equip_slot_category_id: single_row.columns.get(17).to_u32(),
            equip_slot_category: RowRef::<EquipSlotCategory>::from(single_row.columns.get(17).to_u32()),
            item_sort_category_id: single_row.columns.get(18).to_u32(),
            item_sort_category: RowRef::<ItemSortCategory>::from(single_row.columns.get(18).to_u32()),
            stack_size: single_row.columns.get(20).to_u32(),
            is_unique: single_row.columns.get(21).to_bit(0),
            is_untradable: single_row.columns.get(22).to_bit(1),
            is_indisposable: single_row.columns.get(23).to_bit(2),
            lot: single_row.columns.get(24).to_bit(3),
            price_mid: single_row.columns.get(25).to_u32(),
            price_low: single_row.columns.get(26).to_u32(),
            can_be_hq: single_row.columns.get(27).to_bit(4),
            dye_count: single_row.columns.get(28).to_u8(),
            is_crest_worthy: single_row.columns.get(29).to_bit(5),
            item_action_id: single_row.columns.get(30).to_u32(),
            item_action: RowRef::<ItemAction>::from(single_row.columns.get(30).to_u32()),
            cast_time_s: single_row.columns.get(31).to_u8(),
            cooldown_s: single_row.columns.get(32).to_u16(),
            class_job_repair_id: single_row.columns.get(33).to_u32(),
            class_job_repair: RowRef::<ClassJob>::from(single_row.columns.get(33).to_u32()),
            item_repair_id: single_row.columns.get(34).to_u32(),
            item_repair: RowRef::<ItemRepairResource>::from(single_row.columns.get(34).to_u32()),
            item_glamour_id: single_row.columns.get(35).to_u32(),
            item_glamour: RowRef::<Item>::from(single_row.columns.get(35).to_u32()),
            desynth: single_row.columns.get(36).to_u16(),
            is_collectable: single_row.columns.get(37).to_bit(6),
            always_collectable: single_row.columns.get(38).to_bit(7),
            aetherial_reduce: single_row.columns.get(39).to_u16(),
            level_equip: single_row.columns.get(40).to_u8(),
            required_pvp_rank: single_row.columns.get(41).to_u8(),
            equip_restriction: single_row.columns.get(42).to_u8(),
            class_job_category_id: single_row.columns.get(43).to_u32(),
            class_job_category: RowRef::<ClassJobCategory>::from(single_row.columns.get(43).to_u32()),
            grand_company_id: single_row.columns.get(44).to_u32(),
            grand_company: RowRef::<GrandCompany>::from(single_row.columns.get(44).to_u32()),
            item_series_id: single_row.columns.get(45).to_u32(),
            item_series: RowRef::<ItemSeries>::from(single_row.columns.get(45).to_u32()),
            base_param_modifier: single_row.columns.get(46).to_u8(),
            model_main: single_row.columns.get(47).to_u64(),
            model_sub: single_row.columns.get(48).to_u64(),
            class_job_use_id: single_row.columns.get(49).to_u32(),
            class_job_use: RowRef::<ClassJob>::from(single_row.columns.get(49).to_u32()),
            damage_phys: single_row.columns.get(51).to_u16(),
            damage_mag: single_row.columns.get(52).to_u16(),
            delay_ms: single_row.columns.get(53).to_u16(),
            block_rate: single_row.columns.get(55).to_u16(),
            block: single_row.columns.get(56).to_u16(),
            defense_phys: single_row.columns.get(57).to_u16(),
            defense_mag: single_row.columns.get(58).to_u16(),
            item_special_bonus_id: single_row.columns.get(71).to_u32(),
            item_special_bonus: RowRef::<ItemSpecialBonus>::from(single_row.columns.get(71).to_u32()),
            item_special_bonus_param: single_row.columns.get(72).to_u8(),
            materialize_type: single_row.columns.get(85).to_u8(),
            materia_slot_count: single_row.columns.get(86).to_u8(),
            is_advanced_melding_permitted: single_row.columns.get(87).to_bit(0),
            is_pv_p: single_row.columns.get(88).to_bit(1),
            sub_stat_category: single_row.columns.get(89).to_u8(),
            is_glamourous: single_row.columns.get(90).to_bit(2),
        })
    }
}

